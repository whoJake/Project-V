#pragma kernel Generate

#include "/Fractal.cginc"

struct LayerSettings {
    int depth;
    float topTransition;
    float bottomTransition;
    float chasmRadius;

    int octaves;
    float frequency;
    float persistance;
    float lacunarity;
};

//Const
StructuredBuffer<LayerSettings> _ChunkSettings;
int seed;
float voxel_scale;

//Variables
RWTexture3D<float> _DensityTexture;
float3 chunk_origin;
int layer_index;

[numthreads(8,8,8)]
void Generate (uint3 id : SV_DispatchThreadID)
{
    uint width, height, depth;
    _DensityTexture.GetDimensions(width, height, depth);
    if (id.x >= width || id.y >= height || id.z >= depth) return;
    uint3 texture_size = uint3(width, height, depth);

    float3 samplePosition = (float3(seed*0.863, seed*0.512, seed*0.978) + (chunk_origin + (id * voxel_scale))) / texture_size;
    float rawdensity = fnoise(samplePosition, _ChunkSettings[layer_index].octaves, _ChunkSettings[layer_index].frequency, _ChunkSettings[layer_index].persistance, _ChunkSettings[layer_index].lacunarity);
    float densityRange = fnoise_max(_ChunkSettings[layer_index].persistance, _ChunkSettings[layer_index].octaves);
    float density = rawdensity / densityRange;
    _DensityTexture[id.xyz] = density;
}
