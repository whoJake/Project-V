#pragma kernel Generate

RWTexture3D<float> _Target;
StructuredBuffer<float3> _PlatformBuffer;

int    _Seed;

float3 _ChunkOrigin;
float3 _ChunkSize;
float  _VoxelScale;

float3 _LayerOrigin;
float3 _LayerSize;


[numthreads(8,8,8)]
void Generate (uint3 id : SV_DispatchThreadID)
{
    uint w, h, d;
    _Target.GetDimensions(w, h, d);
    if (id.x >= w || id.y >= h || id.z >= d) return;
    uint3 texture_size = uint3(w, h, d);

    float3 world_position = _ChunkOrigin + (id * _VoxelScale);
    float3 inlayer_position = world_position - _LayerOrigin;

    uint platform_count, filler;
    _PlatformBuffer.GetDimensions(platform_count, filler);

    float near_platform = 0;
    for(uint i = 0; i < platform_count; i++){
        float3 platform_position = _PlatformBuffer[i];

        float dst_from_platform = distance(world_position, platform_position);
        if(dst_from_platform < 15.0){
            near_platform = saturate(near_platform + 1.0);
        }
    }

    float dst_from_chasm = distance(_LayerOrigin.xz, world_position.xz);
    float dst_from_edge = (dst_from_chasm - 25.0) / 25.0;

    _Target[id] = dst_from_edge;
}
