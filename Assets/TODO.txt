Camera
	ThirdPersonController.cs
		Maybe implement some kind of focus point catch up when object is moving fast but camera isnt
		Have player be made more transparent or dithered when camera is getting close to it (could apply to all objects)
		Occlusion avoidance is instant on occlusion but smoothed on the way back out
		Remap vertical look direction so that it never gets close to the floor as this is the main cause of clipping

	ThirdPersonControllerEditor.cs
		Have rect/seperator around willControlTransform bool so that it looks nicer
Player
	PlayerMovement.cs
		Convert to state machine to better handle how movement is handled in each case
		Add additional downward velocity when going down a short slope so that the player will "stick" to the floor
		Maybe look at switching to UnityInput 2.0 as it uses input events that you subscribe to rather than reading them straight from Input class
		Make sprinting only work when running forwards, perhaps toggle
	StatHandler.cs
		Is queried by mechanics in order to get statistics such as PlayerMovement.cs asking for the speed when its about to move
		Events for StatChanged etc to get ready for implementing it into UI
	Animation
		Seperate movement of Upper and Lower body
		Upper body is controlled by look direction and always aims at it
		Lower body responds to movement and lightly follows the upper body to align itself

		Upper Body
			Holds torso, arms and head
			Faces towards focus point on all axis
		Lower Body
			Holds hips and legs
			Follows closely behind the upper body to align itself overtime instead of instantly
			Will rotate based on player movement
Items
	Design
		Item rarity colours
		?Items are held by different types of plants/objects (ice, big plant) which dictates their rarity aswell as their element
		How they should be displayed on the ground
		Rotate or follow camera

		Item comes up from ground, hung slightly away from the floor with a small plant branch
		Element erupts from underneath it which infuses it with its element
		Elemental eruption under item seems good with a generic holder for the item

		Element types
			Fire/Ice/Water/Ground + others Gravitational etc
			Something more abstract? Starrail types
			How should they interact with eachother? Synergies ofc but should some detriment others? Maybe sacrifice one part of them for something different

	Gameplay
		How are items discovered across runs
		?Check-points to hand in items so they can be upgraded
		?Risk keeping the item for the run or hand it in so that you can upgrade/unlock it for the next run
		How does rarity change with depth/layer
		When are items dropped. From bosses? From monster packs? From chests/item areas?
	Implementation
		Base item class that can hold an item
		Will the stat buff directly affect stats or will it be added to a pool that recalculates stats after a pickup

		Element
			Fire
				Spawn some particles, shader then colours fire based on how many particles are nearby
				More particles nearby = brighter shade from colour
				Less particles nearby = colder fire colour
				Particle has lifetime, once it reaches end of lifetime it respawns at the bottom as a fresh particle
			Ice
				Pick between set of meshes for crystals
				Each crystal mesh has a top vertices and bottom vertices group that allows them to be moved (is this what rigging is?)
				Write shader for these ice crystals, maybe colour gradient with some normal mapping
World
	General
		Maybe have some kind of gameplay element that seperates the layer (mist etc.) to cover up the transition and hide the uglyness
		Look into better method for fog, exponential squared fog looks terrible because of the diagonal viewing issue, low hanging fog like in that bethesda game trailer
			https://twitter.com/ephtracy/status/1619493640237367298
			https://twitter.com/BenjiSales/status/1668003498510766082/photo/1
		Implement dynamic loading for the chunks themselves

	TerrainHandler.cs
		Add in-unity variables for chunk loading ranges
		Somehow implement look direction into the chunk loading?

	ChunkBarrierEdit.compute
		Perform some kind of ground check to ensure that it isnt creating an impact crator that is flaoting in midair

	StarterTerrain.compute
		Let platforms have more complex shapes other than noised circles
		Improve generation of platforms on C# so that they can form a feasible path to the bottom
		Add paths into side of wall
		Add noise to platform stems
		https://twitter.com/masaki_hirooka/status/1635306087221178368
		https://twitter.com/iamagco/status/1614925562870468610/photo/1

	MeshMaths.cs
		Add method that can join meshInfos

	Perhaps a representation of visibility in order to better LOD these chunks

	How will lighting work when there is no direct sunlight to a lot of the map, obviously big whole in middle but it might not be possible for that to theoritically light the entire area
	